Вариант амбициозного уровня

Вариант №А-1:

Реализуйте АТД “дек” (очередь с двумя концами) на основе сегментированного массива - несколько блоков фиксированной длины, хранящие данные, и служебный блок-директория, содержащий указатели на блоки данных. Обработайте все возможные ошибки.

Сегментированный массив моделируется следующим образом:

struct IntegerDeque
{
    // Количество ячеек в массиве-директории
    int m_directorySize;

    // Количество ячеек в каждом блоке данных
    int m_blockSize;

    // Массив-директория: указатели на блоки данных
    int ** m_pDirectory;

    // Индексы верхней и нижней позиции из занятых ячеек в директории
    int m_frontBlockIndex, m_backBlockIndex;

    // Количество занятых элементов в первом и последнем блоках
    int m_frontUsed, m_backUsed;
};

Графически данную структуру можно изобразить следующим образом:

 

Должны поддерживаться следующие операции:
●	CLEAR ( DEQUE )
●	IS_EMPTY( DEQUE ) : bool
●	PUSH_FRONT( DEQUE, VALUE )
●	POP_FRONT( DEQUE )
●	FRONT ( DEQUE ) : VALUE
●	PUSH_BACK ( DEQUE, VALUE )
●	POP_BACK( DEQUE )
●	BACK ( DEQUE ) : VALUE

Необходимо проверить корректность работы всех операций при помощи тестовой программы, максимально покрывающей все возможные случаи.
